{"version":3,"sources":["../../../src/@ionic-native/plugins/device-orientation/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,iBAAA,EAAmB,MAAA,EAAO,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAoC7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AAoBH;IAAuC,qCAAiB;IAAxD;;IAiCA,CAAC;IAhCC;;;OAGG;IAEH,6CAAiB,GAAjB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAMH,wCAAY,GAAZ,UACE,OAAyC;QAEzC,MAAM,CAAC;IACT,CAAC;IACI,4BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,gCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA1BA;QADC,OAAO,EAAE;;;;8DAGT;IAcD;QALC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;YACxB,UAAU,EAAE,IAAI;YAChB,aAAa,EAAE,YAAY;SAC5B,CAAC;;;wCAGC,UAAU;yDAEZ;IA1BU,iBAAiB;QAnB7B,MAAM,CAAC;YACN,UAAU,EAAE,mBAAmB;YAC/B,MAAM,EAAE,mCAAmC;YAC3C,SAAS,EAAE,mBAAmB;YAC9B,IAAI,EAAE,6DAA6D;YACnE,SAAS,EAAE;gBACT,gBAAgB;gBAChB,SAAS;gBACT,eAAe;gBACf,SAAS;gBACT,YAAY;gBACZ,KAAK;gBACL,OAAO;gBACP,QAAQ;gBACR,SAAS;gBACT,eAAe;aAChB;SACF,CAAC;OAEW,iBAAiB,CAiC7B;IAAD,wBAAC;CAjCD,AAiCC,CAjCsC,iBAAiB,GAiCvD;SAjCY,iBAAiB","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface DeviceOrientationCompassHeading {\n  /**\n   * The heading in degrees from 0-359.99 at a single moment in time. (Number)\n   */\n  magneticHeading: number;\n\n  /**\n   * The heading relative to the geographic North Pole in degrees 0-359.99 at a single moment in time. A negative value indicates that the true heading can't be determined. (Number)\n   */\n  trueHeading: number;\n\n  /**\n   * The deviation in degrees between the reported heading and the true heading. (Number)\n   */\n  headingAccuracy: number;\n\n  /**\n   * The time at which this heading was determined. (DOMTimeStamp)\n   */\n  timestamp: number;\n}\n\nexport interface DeviceOrientationCompassOptions {\n  /**\n   * How often to retrieve the compass heading in milliseconds. (Number) (Default: 100)\n   */\n  frequency?: number;\n\n  /**\n   * The change in degrees required to initiate a watchHeading success callback. When this value is set, frequency is ignored. (Number)\n   */\n  filter?: number;\n}\n\n/**\n * @name Device Orientation\n * @description\n * Requires Cordova plugin: `cordova-plugin-device-orientation`. For more info, please see the [Device Orientation docs](https://github.com/apache/cordova-plugin-device-orientation).\n *\n * @usage\n * ```typescript\n * // DeviceOrientationCompassHeading is an interface for compass\n * import { DeviceOrientation, DeviceOrientationCompassHeading } from '@ionic-native/device-orientation';\n *\n * constructor(private deviceOrientation: DeviceOrientation) { }\n *\n * ...\n *\n * // Get the device current compass heading\n * this.deviceOrientation.getCurrentHeading().then(\n *   (data: DeviceOrientationCompassHeading) => console.log(data),\n *   (error: any) => console.log(error)\n * );\n *\n * // Watch the device compass heading change\n * var subscription = this.deviceOrientation.watchHeading().subscribe(\n *   (data: DeviceOrientationCompassHeading) => console.log(data)\n * );\n *\n * // Stop watching heading change\n * subscription.unsubscribe();\n * ```\n * @interfaces\n * DeviceOrientationCompassOptions\n * DeviceOrientationCompassHeading\n */\n@Plugin({\n  pluginName: 'DeviceOrientation',\n  plugin: 'cordova-plugin-device-orientation',\n  pluginRef: 'navigator.compass',\n  repo: 'https://github.com/apache/cordova-plugin-device-orientation',\n  platforms: [\n    'Amazon Fire OS',\n    'Android',\n    'BlackBerry 10',\n    'Browser',\n    'Firefox OS',\n    'iOS',\n    'Tizen',\n    'Ubuntu',\n    'Windows',\n    'Windows Phone'\n  ]\n})\n\nexport class DeviceOrientation extends IonicNativePlugin {\n  /**\n   * Get the current compass heading.\n   * @returns {Promise<DeviceOrientationCompassHeading>}\n   */\n  @Cordova()\n  getCurrentHeading(): Promise<DeviceOrientationCompassHeading> {\n    return;\n  }\n\n  /**\n   * Get the device current heading at a regular interval\n   *\n   * Stop the watch by unsubscribing from the observable\n   * @param {DeviceOrientationCompassOptions} [options] Options for compass. Frequency and Filter. Optional\n   * @returns {Observable<DeviceOrientationCompassHeading>} Returns an observable that contains the compass heading\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    observable: true,\n    clearFunction: 'clearWatch'\n  })\n  watchHeading(\n    options?: DeviceOrientationCompassOptions\n  ): Observable<DeviceOrientationCompassHeading> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}